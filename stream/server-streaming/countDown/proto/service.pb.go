// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: service.proto

package countdownpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CountdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timer int64 `protobuf:"varint,1,opt,name=timer,proto3" json:"timer,omitempty"`
}

func (x *CountdownRequest) Reset() {
	*x = CountdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountdownRequest) ProtoMessage() {}

func (x *CountdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountdownRequest.ProtoReflect.Descriptor instead.
func (*CountdownRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *CountdownRequest) GetTimer() int64 {
	if x != nil {
		return x.Timer
	}
	return 0
}

type CountdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountdownResponse) Reset() {
	*x = CountdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountdownResponse) ProtoMessage() {}

func (x *CountdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountdownResponse.ProtoReflect.Descriptor instead.
func (*CountdownResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *CountdownResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x28, 0x0a, 0x10, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x22, 0x29, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32,
	0x52, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x46, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x42, 0x0d, 0x5a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_service_proto_goTypes = []interface{}{
	(*CountdownRequest)(nil),  // 0: countdown.CountdownRequest
	(*CountdownResponse)(nil), // 1: countdown.CountdownResponse
}
var file_service_proto_depIdxs = []int32{
	0, // 0: countdown.Coundown.Start:input_type -> countdown.CountdownRequest
	1, // 1: countdown.Coundown.Start:output_type -> countdown.CountdownResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CoundownClient is the client API for Coundown service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoundownClient interface {
	Start(ctx context.Context, in *CountdownRequest, opts ...grpc.CallOption) (Coundown_StartClient, error)
}

type coundownClient struct {
	cc grpc.ClientConnInterface
}

func NewCoundownClient(cc grpc.ClientConnInterface) CoundownClient {
	return &coundownClient{cc}
}

func (c *coundownClient) Start(ctx context.Context, in *CountdownRequest, opts ...grpc.CallOption) (Coundown_StartClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Coundown_serviceDesc.Streams[0], "/countdown.Coundown/Start", opts...)
	if err != nil {
		return nil, err
	}
	x := &coundownStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Coundown_StartClient interface {
	Recv() (*CountdownResponse, error)
	grpc.ClientStream
}

type coundownStartClient struct {
	grpc.ClientStream
}

func (x *coundownStartClient) Recv() (*CountdownResponse, error) {
	m := new(CountdownResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CoundownServer is the server API for Coundown service.
type CoundownServer interface {
	Start(*CountdownRequest, Coundown_StartServer) error
}

// UnimplementedCoundownServer can be embedded to have forward compatible implementations.
type UnimplementedCoundownServer struct {
}

func (*UnimplementedCoundownServer) Start(*CountdownRequest, Coundown_StartServer) error {
	return status.Errorf(codes.Unimplemented, "method Start not implemented")
}

func RegisterCoundownServer(s *grpc.Server, srv CoundownServer) {
	s.RegisterService(&_Coundown_serviceDesc, srv)
}

func _Coundown_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CountdownRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoundownServer).Start(m, &coundownStartServer{stream})
}

type Coundown_StartServer interface {
	Send(*CountdownResponse) error
	grpc.ServerStream
}

type coundownStartServer struct {
	grpc.ServerStream
}

func (x *coundownStartServer) Send(m *CountdownResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Coundown_serviceDesc = grpc.ServiceDesc{
	ServiceName: "countdown.Coundown",
	HandlerType: (*CoundownServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Start",
			Handler:       _Coundown_Start_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
